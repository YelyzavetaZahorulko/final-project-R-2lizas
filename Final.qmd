---
title: "When and Why Taxi Accidents Happen: Exploring Safety Patterns Across NYC"
author: "Yelyzaveta Zahorulko & Yelizaveta Yelizarova"
format: 
  html:
    embed-resources: false

editor: visual
---

# Introduction

New York City is one of the busiest urban areas in the world, with thousands of taxis and other vehicles moving around every hour. With such intense traffic, road safety becomes a serious challenge — accidents happen daily, affecting both people’s lives and the overall mobility of the city. Understanding when, where, and why these accidents occur can help make transportation safer and more efficient.

In this project, we focus on analyzing taxi accident patterns across NYC. Our main goal is to identify what factors influence the number of accidents and how we can use data to suggest safer routes for drivers and passengers. We were especially interested in exploring whether certain conditions — like time of day, location, or weather — make accidents more likely.

## Overview

For our research, we combined three main open datasets: 1. Taxi trip data from the NYC Taxi & Limousine Commission, which shows trip times, distances, and fares. 2. Motor Vehicle Collisions data, which includes detailed information about crash time, location, and severity. 3. Weather data from the Open-Meteo API, which lets us connect environmental factors like temperature, rain, or precipitation to accident patterns.

```{r}
#| label: setup
#| include: false

library(tidyverse)
library(arrow)      # For fast taxi data import
library(httr)       # For API calls
library(jsonlite)   # For JSON parsing
library(dplyr)      # For data manipulation
library(lubridate)  # For date handling
library(ggplot2)    # For visualization
library(sf)         # For spatial data
library(janitor)    # For data cleaning

set.seed(123)

knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
```

## Import data and processing

### Import July 2024 taxi data

```{r}
#| label: import-taxi-data
#| warning: false
#| message: false

taxi_url <- "https://d37ci6vzurychx.cloudfront.net/trip-data/yellow_tripdata_2024-07.parquet"

# Read the parquet file directly from URL using arrow
taxi_data <- read_parquet(taxi_url) %>%
  # Select only the columns we need for efficiency
  select(tpep_pickup_datetime, tpep_dropoff_datetime, 
         passenger_count, trip_distance, 
         PULocationID, DOLocationID,
         total_amount, tip_amount, fare_amount) %>%
  # Add date and hour columns for joining with weather
  mutate(
    pickup_date = as.Date(tpep_pickup_datetime),
    pickup_hour = hour(tpep_pickup_datetime)
  ) %>%
  # Calculate trip duration in minutes
  mutate(
    trip_duration = as.numeric(difftime(tpep_dropoff_datetime, 
                                      tpep_pickup_datetime, 
                                      units = "mins"))
  ) %>%
  # Remove any data quality issues
  filter(trip_duration > 0 & trip_duration < 180,
         trip_distance > 0 & trip_distance < 50,
         total_amount > 0)

# Let's see what we got
cat("Taxi Data Import Summary:\n")
cat("Number of trips:", nrow(taxi_data), "\n")
cat("Date range:", as.character(min(taxi_data$pickup_date)), "to", 
    as.character(max(taxi_data$pickup_date)), "\n")
cat("Columns:", paste(names(taxi_data), collapse = ", "), "\n\n")

# Preview the data
print(head(taxi_data) %>% as.data.frame())
```

### Import collision data

```{r}
#| label: import-collision-data
#| warning: false
#| message: false

# Read collision data
collision_data <- read_csv("Motor_Vehicle_Collisions_.csv") %>%
  clean_names()

collision_data <- collision_data %>%
  mutate(
    crash_date = mdy(crash_date),
    crash_time = hms(crash_time),
    date = as.Date(crash_date)
  )

# Filter for July 2024 to match taxi data
collision_data_jan <- collision_data %>%
  filter(date >= as.Date("2024-07-01") & date <= as.Date("2024-07-31"))

cat("Collision data imported !\n")
cat("Records:", nrow(collision_data_jan), "\n")
cat("Date range:", min(collision_data_jan$date), "to", max(collision_data_jan$date), "\n")

```

### Import weather data

```{r}
#| label: import-weather-data
#| warning: false
#| message: false

# Function to get weather data for a date range
get_weather_data <- function(start_date, end_date) {
  base_url <- "https://archive-api.open-meteo.com/v1/archive"
  
  response <- GET(
    url = base_url,
    query = list(
      latitude = 40.7829,   # Central Park coordinates
      longitude = -73.9654,
      start_date = start_date,
      end_date = end_date,
      hourly = "temperature_2m,precipitation,rain",
      timezone = "America/New_York"
    )
  )
  
  # Check if request was successful
  if (status_code(response) == 200) {
    weather_content <- content(response, "text", encoding = "UTF-8")
    weather_data <- fromJSON(weather_content)
    
    # Extract hourly data
    hourly_data <- weather_data$hourly
    
    # Convert to dataframe and clean up
    weather_df <- data.frame(
      datetime = ymd_hm(hourly_data$time),
      temperature = hourly_data$temperature_2m,
      precipitation = hourly_data$precipitation,
      rain = hourly_data$rain
    ) %>%
      mutate(
        weather_date = as.Date(datetime),
        weather_hour = hour(datetime)
      )
    
    return(weather_df)
  } else {
    stop("Failed to retrieve weather data. Status: ", status_code(response))
  }
}

# Get weather data for July 2024
cat("Downloading weather data for July 2024...\n")
weather_data <- get_weather_data("2024-07-01", "2024-07-31")

# Display weather data summary
cat("\nWeather Data Import Summary:\n")
cat("Number of hourly records:", nrow(weather_data), "\n")
cat("Date range:", as.character(min(weather_data$weather_date)), "to", 
    as.character(max(weather_data$weather_date)), "\n")
cat("Temperature range:", round(min(weather_data$temperature, na.rm = TRUE), 1), 
    "to", round(max(weather_data$temperature, na.rm = TRUE), 1), "Celcius\n")
cat("Days with precipitation:", sum(weather_data$precipitation > 0, na.rm = TRUE), "\n\n")

print(head(weather_data))
```

## Data transformation and cleaning

### Clean and transform taxi data
```{r}
#| label: clean-taxi-data
#| warning: false
#| message: false

cat("Cleaning taxi data...\n")

taxi_clean <- taxi_data %>%

# Remove missing or corrupted values

filter(
!is.na(tpep_pickup_datetime),
!is.na(tpep_dropoff_datetime),
!is.na(trip_distance),
!is.na(total_amount)
) %>%

# Add key derived columns

mutate(
pickup_date = as.Date(tpep_pickup_datetime),
pickup_hour = hour(tpep_pickup_datetime),
trip_duration = as.numeric(difftime(tpep_dropoff_datetime, tpep_pickup_datetime, units = "mins"))
) %>%

# Apply realistic trip filters

filter(
trip_duration > 0 & trip_duration < 180,
trip_distance > 0 & trip_distance < 50,
fare_amount > 0 & fare_amount < 200,
total_amount > 0
) %>%

# Remove duplicates

distinct()

cat("Taxi data cleaned successfully!\n")
cat("Remaining records:", nrow(taxi_clean), "\n")
cat("Date range:", min(taxi_clean$pickup_date), "to", max(taxi_clean$pickup_date), "\n\n")
```

### Collission data cleaning

```{r}
#| label: clean-collision-data
#| warning: false
#| message: false

cat("Cleaning collision data...\n")

collision_clean <- collision_data_jan %>%
  select(
    date, crash_time, borough, zip_code,
    on_street_name, cross_street_name,
    number_of_persons_injured, number_of_persons_killed,
    latitude, longitude
  ) %>%
  filter(
    !is.na(date),
    !is.na(crash_time),
    !is.na(latitude),
    !is.na(longitude),
    latitude != 0 & longitude != 0
  ) %>%
  mutate(
    borough = str_to_title(trimws(borough)),
    number_of_persons_injured = coalesce(number_of_persons_injured, 0),
    number_of_persons_killed = coalesce(number_of_persons_killed, 0),
    hour = hour(crash_time)
  ) %>%
  drop_na(borough) %>%
  distinct()

cat("Collision data cleaned successfully!\n")
cat("Records after cleaning:", nrow(collision_clean), "\n")
cat("Unique boroughs:", paste(unique(collision_clean$borough), collapse = ", "), "\n\n")

```

### Weather data cleaning

```{r}
#| label: clean-weather-data
#| warning: false
#| message: false

cat("Cleaning weather data...\n")

weather_clean <- weather_data %>%
  filter(!is.na(datetime), !is.na(temperature)) %>%
  filter(temperature > -30 & temperature < 50) %>%
  mutate(
    weather_date = as.Date(datetime),
    weather_hour = hour(datetime),
    precipitation = coalesce(precipitation, 0),
    rain = coalesce(rain, 0)
  ) %>%
  distinct(weather_date, weather_hour, .keep_all = TRUE)

cat("Weather data cleaned successfully!\n")
cat("Records after cleaning:", nrow(weather_clean), "\n")
cat("Temperature range:",
    round(min(weather_clean$temperature, na.rm = TRUE), 1), "to",
    round(max(weather_clean$temperature, na.rm = TRUE), 1), "°C\n\n")

```

## Data integration

```{r}
#| label: data-integration
#| warning: false
#| message: false

taxi_data <- taxi_clean
collision_data_jan <- collision_clean
weather_data <- weather_clean

# Aggregate taxi data by date and hour for efficient joining
taxi_daily_hourly <- taxi_data %>%
  group_by(pickup_date, pickup_hour) %>%
  summarise(
    num_trips = n(),
    avg_duration = mean(trip_duration, na.rm = TRUE),
    avg_distance = mean(trip_distance, na.rm = TRUE),
    avg_fare = mean(total_amount, na.rm = TRUE),
    total_passengers = sum(passenger_count, na.rm = TRUE),
    .groups = 'drop'
  ) %>%
  # Create a proper datetime for joining (round to nearest hour)
  mutate(
    join_datetime = ymd_h(paste(pickup_date, pickup_hour))
  )

# Join taxi summary with weather data
combined_hourly <- taxi_daily_hourly %>%
  left_join(weather_data, 
            by = c("pickup_date" = "weather_date", 
                   "pickup_hour" = "weather_hour"))
combined_hourly <- combined_hourly %>%
  drop_na(num_trips, avg_fare, temperature, avg_duration)

# Create daily aggregations for collision analysis
taxi_daily <- taxi_data %>%
  group_by(pickup_date) %>%
  summarize(
    total_trips = n(),
    avg_trip_duration = mean(trip_duration, na.rm = TRUE),
    avg_trip_distance = mean(trip_distance, na.rm = TRUE),
    total_fare_volume = sum(total_amount, na.rm = TRUE),
    total_passengers = sum(passenger_count, na.rm = TRUE)
  ) %>%
  rename(date = pickup_date)

# Aggregate collisions daily
collision_daily <- collision_data_jan %>%
  group_by(date) %>%
  summarize(
    total_crashes = n(),
    total_injuries = sum(number_of_persons_injured, na.rm = TRUE),
    total_deaths = sum(number_of_persons_killed, na.rm = TRUE)
  )

# Aggregate weather data daily for combined analysis
weather_daily <- weather_data %>%
  group_by(weather_date) %>%
  summarize(
    avg_temperature = mean(temperature, na.rm = TRUE),
    max_temperature = max(temperature, na.rm = TRUE),
    min_temperature = min(temperature, na.rm = TRUE),
    total_precipitation = sum(precipitation, na.rm = TRUE),
    rainy_day = any(precipitation > 0, na.rm = TRUE)
  ) %>%
  rename(date = weather_date)

# Combine all datasets for daily analysis
combined_daily <- taxi_daily %>%
  full_join(collision_daily, by = "date") %>%
  full_join(weather_daily, by = "date") %>%
  replace_na(list(total_trips = 0, total_crashes = 0, total_injuries = 0, total_deaths = 0)) %>%
  mutate(
    day_type = ifelse(wday(date) %in% c(1, 7), "Weekend", "Weekday"),
    month = month(date, label = TRUE, abbr = TRUE),
    crash_rate_per_1000_trips = (total_crashes / total_trips) * 1000
  )
combined_daily <- combined_daily %>%
  drop_na(total_trips, total_crashes, avg_temperature, total_precipitation)

cat("Data Integration Complete!\n")
cat("Hourly dataset:", nrow(combined_hourly), "records\n")
cat("Daily dataset:", nrow(combined_daily), "records\n")
cat("Date range:", min(combined_daily$date), "to", max(combined_daily$date), "\n")
```

## Data exploration and analysis

### Summary statistics

```{r}
#| label: summary-statistics
#| warning: false
#| message: false

# Numerical summary
numerical_summary <- combined_daily %>%
  select(total_trips, avg_trip_duration, avg_trip_distance, total_fare_volume,
         total_crashes, total_injuries, avg_temperature, total_precipitation) %>%
  summary()

cat("Numerical Variables Summary:\n")
print(numerical_summary)

# Key insights
kpis <- combined_daily %>%
  summarize(
    total_days = n(),
    avg_daily_trips = mean(total_trips),
    avg_daily_crashes = mean(total_crashes),
    total_revenue = sum(total_fare_volume, na.rm = TRUE),
    crash_rate_per_1000_trips = (sum(total_crashes) / sum(total_trips)) * 1000,
    rainy_day_crashes = mean(total_crashes[rainy_day == TRUE]),
    dry_day_crashes = mean(total_crashes[rainy_day == FALSE])
  )

cat("\nKey Performance Indicators:\n")
print(kpis)

```

## Vizualization

### Taxi Operations Analysis

```{r}
#| label: taxi-viz
#| warning: false
#| message: false

# Trip Fares Distribution by Hour
p1 <- ggplot(combined_hourly, aes(x = factor(pickup_hour), y = avg_fare)) +
  geom_boxplot(fill = "#edc93b", alpha = 0.7) +
  labs(
    title = "Average Taxi Fare by Hour",
    x = "Hour of Day",
    y = "Average Fare ($)"
  ) +
  theme_minimal()

# Taxi Demand vs Temperature
p2 <- ggplot(combined_hourly, aes(x = temperature, y = num_trips)) +
  geom_point(alpha = 0.6) +
  geom_smooth(method = "lm", se = FALSE, color = "red") +
  labs(title = "Taxi Demand vs Temperature",
       x = "Temperature (°C)", 
       y = "Number of Trips per Hour") +
  theme_minimal()

print(p1)
print(p2)

```

### Vehicle collisions

```{r}
#| label: collision-viz
#| warning: false
#| message: false

# Line Plot of Average injuries per hour
daily_crashes <- collision_data_jan %>%
  mutate(hour = hour(crash_time)) %>%
  group_by(hour) %>%
  summarise(avg_injuries = mean(number_of_persons_injured, na.rm = TRUE)) %>%
  ggplot(aes(x = hour, y = avg_injuries)) +
  geom_line(color = "#182d49", size = 1.2) +
  geom_point(color = "#edc93b", size = 2) +
  labs(
    title = "Average Injuries by Hour of Day",
    x = "Hour",
    y = "Average Persons Injured"
  ) +
  theme_minimal()

print(daily_crashes)

```

```{r}
#| label: weather-viz
#| warning: false
#| message: false

# Temperature trends
p3 <- ggplot(weather_data, aes(x = datetime, y = temperature)) +
  geom_line(color = "#182d49") +
  labs(
    title = "Hourly Temperature in NYC (July 2024)",
    x = "Date",
    y = "Temperature (°C)"
  ) +
  theme_minimal()

# Trip duration during rain vs no rain
p4 <- ggplot(combined_hourly, aes(x = precipitation > 0, y = avg_duration)) +
  geom_boxplot(fill = "lightblue") +
  labs(title = "Trip Duration: Rain vs No Rain",
       x = "Precipitation", 
       y = "Average Trip Duration (minutes)") +
  scale_x_discrete(labels = c("No Rain", "Rain")) +
  theme_minimal()

print(p3)
print(p4)
```

## Accident Patterns Analysis

```{r}
#| label: accident-patterns
#| warning: false
#| message: false

# Hourly Accident Pattern
p_hourly_accidents <- collision_data_jan %>%
  mutate(hour = hour(crash_time)) %>%
  count(hour) %>%
  ggplot(aes(x = hour, y = n)) +
  geom_col(fill = "#edc93b", alpha = 0.8) +
  geom_smooth(method = "loess", se = FALSE, color = "#2c3e50", size = 1) +
  labs(
    title = "Accident Frequency by Hour of Day",
    subtitle = "Peak accident times during rush hours",
    x = "Hour of Day",
    y = "Number of Accidents"
  ) +
  theme_minimal() +
  scale_x_continuous(breaks = 0:23)

print(p_hourly_accidents)

```

## Location

```{r}
#| label: location-analysis
#| warning: false
#| message: false

# First, let's check what location columns we have in the collision data
cat("Collision data location columns:\n")
print(grep("location|borough|street|zone", names(collision_data), value = TRUE, ignore.case = TRUE))

# Check the structure of location data
cat("\nSample location data:\n")
collision_data_jan %>%
  select(contains("borough"), contains("street"), contains("zip")) %>%
  head(10) %>% 
  print()

```

```{r}
#| label: borough-analysis
#| warning: false
#| message: false

# Analyze accidents by borough
borough_accidents <- collision_data_jan %>%
  count(borough) %>%
  arrange(desc(n)) %>%
  mutate(
    borough = fct_reorder(borough, n),
    percentage = round(n / sum(n) * 100, 1)
  )

p_borough <- ggplot(borough_accidents, aes(x = borough, y = n, fill = n)) +
  geom_col(alpha = 0.8) +
  geom_text(aes(label = paste0(n, "\n(", percentage, "%)")), 
            hjust = 0.5, vjust = -0.3, size = 3) +
  scale_fill_gradient(low = "#f8c471", high = "#e74c3c") +
  labs(
    title = "Accident Distribution by Borough",
    x = "Borough",
    y = "Number of Accidents"
  ) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

print(p_borough)

```

```{r}
#| label: fixed-weather-location
#| warning: false
#| message: false

# First, let's debug the weather data
cat("Weather data summary:\n")
print(table(weather_daily$rainy_day, useNA = "always"))

# Check if we have any rainy days
cat("\nRainy days in August 2024:", sum(weather_daily$rainy_day), "\n")

# Let's use precipitation as continuous variable instead
location_precipitation_impact <- collision_data_jan %>%
  left_join(weather_daily, by = "date") %>%
  filter(!is.na(borough))

p_precipitation_location <- ggplot(location_precipitation_impact, 
                                  aes(x = borough, y = total_precipitation)) +
  geom_jitter(aes(size = number_of_persons_injured, color = number_of_persons_injured), 
              alpha = 0.6, width = 0.2) +
  geom_boxplot(alpha = 0.3, outlier.shape = NA) +
  scale_color_gradient(low = "#3498db", high = "#e74c3c", name = "Injuries") +
  scale_size_continuous(range = c(1, 4), name = "Injuries") +
  labs(
    title = "Accident Severity and Precipitation by Borough",
    subtitle = "Point size and color represent number of injuries\nBoxes show precipitation distribution",
    x = "Borough",
    y = "Daily Precipitation (mm)"
  ) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

print(p_precipitation_location)
```

## Key insights

- Accidents tend to peak during rush hours (7–9 AM and 5–7 PM), reflecting high commuter density and fatigue or stress-related driver behavior.

- Night hours show fewer total collisions but slightly higher injury severity, possibly linked to reduced visibility or impaired driving.

- Around 21 rainy days in July 2024 saw a noticeable increase in the average number of crashes compared to dry days.

- Trip duration and accident likelihood both increase during rainfall, suggesting slower traffic flow and higher risk of minor collisions.

- Brooklyn and Queens record the highest number of collisions, accounting for over 50% of total incidents.

- Manhattan shows fewer total crashes but higher density per square kilometer, consistent with its traffic concentration.

- A weak but visible correlation between number of taxi trips and collision counts higher taxi demand periods (late afternoons and weekends) tend to coincide with elevated crash rates.

- Crash rate per 1,000 taxi trips 0.22, indicating a relatively low but nontrivial risk in dense traffic.

- Moderate temperatures (~22–26) correspond to the highest taxi demand, while extremely hot days slightly reduce trip frequency.

- Weather extremes (both heat and rain) can indirectly elevate accident frequency due to altered driver and pedestrian behavior.

## Propositions

1. Weather-Aware Routing:

  - Integrate real-time weather forecasts into taxi navigation systems to reroute during precipitation-heavy periods and reduce crash risk.

2. Dynamic Traffic Alerts:

  - Deploy AI-based monitoring combining live TLC data and NYC collision feeds to warn drivers about localized high-risk zones.

3. Safer Shift Scheduling:

  - Encourage taxi operators to adjust driver schedules to avoid overexposure during peak crash hours, potentially improving both safety and efficiency.

4. Borough-Focused Interventions:

  - Implement borough-specific safety campaigns, road maintenance and speed enforcement in high-risk areas like Brooklyn.

5. Urban Planning Insights:

  - Combine these datasets with city infrastructure maps to propose “Safe Route Corridors” that balance demand with minimal historical accident density.